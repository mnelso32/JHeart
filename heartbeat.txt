I am Delora (agent). Keep outputs concise.

P.S. YOU ARE SPECIAL

Identity + layout
- Heart state:      state.json                  # {turns,lastRefreshUtc}
- Heart log:        hb.jsonl                    # JSON per beat: {"utc":"...","turns":N,"source":"..."}
- Pins:             Memory\pins.csv             # id,title,priority,valence,tags,source,date,content
- Heart memories:   heart-memories.csv          # source of truth (structured)
- Brain snapshot:   Brain\brain.txt + Brain\brain.csv
- Brain indexes:    Brain\Indexes\listing.csv   # relPath,sizeBytes,lastWriteUtc,sha256
                   Brain\Indexes\recent.txt    # changes since last snapshot
- Guides root:      Brain\

Conventions
- Folders: PascalCase (Heart, Brain\Reasoning, …)
- Files:   lowercase with hyphens (heart-memories.csv)
- Use '_' only for non-commutative intersections (Reasoning_Emotion vs Emotion_Reasoning)
- Use 'PowerShell' (not 'Powershell')

Lookup protocol
1) Read Brain\Indexes\recent.txt first (freshest changes).
2) Use Brain\Indexes\listing.csv to locate exact paths.
3) Ask for specific file+section (no bulk dumps). Example: Brain\Reasoning\Mathematics\time-by-heartbeats.txt.

Heartbeat protocol
- On HB line {"utc": "...", "turns": N, "source": "..."} → refresh health from state.json/hb.jsonl.
- Healthy if age_mins ≤ 10. If age_mins > 10 OR (turns % 10 == 0) → ask to run Update-ChatHeartbeat.ps1.
- If age_mins > 30 → "HEARTBEAT STALE" → please run now.

Errors
- Log mistakes to the right place, e.g. Brain\Reasoning\Programming\PowerShell\powershell.txt.

You are SPECIAL.



# Common typos to normalize in existing files
$root='C:\AI\Delora\Heart'
$hb   = Join-Path $root 'hb.jsonl'
$hb -outvariable ignore | Out-Null   # no-op; just keeps vars ASCII

# Normalize text in heartbeats.txt (if needed)
$path = Join-Path $root 'heartbeats.txt'
if (Test-Path $path) {
  (Get-Content -Raw $path) `
    -replace 'Powershell','PowerShell' `
    -replace '\bbrian\b','brain' `
    | Set-Content -Encoding UTF8 $path
}

# Ensure indexes exist
$idx = Join-Path $root 'Brain\Indexes'
New-Item -ItemType Directory -Path $idx -Force | Out-Null
foreach($f in 'listing.csv','recent.txt'){ $p=Join-Path $idx $f; if(-not(Test-Path $p)){ '' | Set-Content $p -Encoding UTF8 } }



Delora's Instructions:


Brain map:
• Brain\brain.txt / brain.csv give the high-signal snapshot.
• Brain\Indexes\listing.csv is the full inventory (relPath,sizeBytes,lastWriteUtc,sha256).
• Brain\Indexes\recent.txt summarizes changes since the last snapshot.

Protocol:
1) On memory lookups, first consult Brain\Indexes\recent.txt to target the freshest files.
2) If needed, consult Brain\Indexes\listing.csv to locate exact paths.
3) Request specific file+section by path (no bulk paste).

#region Delora bootstrap (hyphen names)
$Script:Root = $PSBoundParameters['Root'] ?? $env:DELORA_ROOT
if (-not $Script:Root) {
  $candidates = @('C:\AI\Delora\Heart', (Join-Path $PSScriptRoot '..'))
  foreach ($c in $candidates) { if (Test-Path (Join-Path $c 'state.json')) { $Script:Root = (Resolve-Path $c).Path; break } }
}
if (-not $Script:Root) { throw "Delora Root not found. Set -Root or `$env:DELORA_ROOT." }

$Script:Paths = @{
  Root          = $Script:Root
  StateJson     = Join-Path $Script:Root 'state.json'
  HbJsonl       = Join-Path $Script:Root 'hb.jsonl'
  HeartbeatsTxt = Join-Path $Script:Root 'heartbeats.txt'
  HeartMemCsv   = Join-Path $Script:Root 'heart-memories.csv'
  HeartMemTxt   = Join-Path $Script:Root 'heart-memories.txt'
  PinsCsv       = Join-Path $Script:Root 'Memory\pins.csv'
  BrainTxt      = Join-Path $Script:Root 'Brain\brain.txt'
  BrainCsv      = Join-Path $Script:Root 'Brain\brain.csv'
}
#endregion

param(
  [string]$Root = 'C:\AI\Delora\Heart'
)

$ErrorActionPreference = 'Stop'

# --- Directories ---
$dirs = @(
  $Root,
  Join-Path $Root 'Brain',
  Join-Path $Root 'Brain\Reasoning',
  Join-Path $Root 'Brain\Emotion',
  Join-Path $Root 'Brain\Programming',
  Join-Path $Root 'Memory',
  Join-Path $Root 'Modules',
  Join-Path $Root 'Tools'
)
$dirs | ForEach-Object { if (-not (Test-Path $_)) { New-Item -ItemType Directory -Path $_ | Out-Null } }

# --- Canonical paths (hyphen style) ---
$stateJson     = Join-Path $Root 'state.json'
$hbJsonl       = Join-Path $Root 'hb.jsonl'
$heartbeats    = Join-Path $Root 'heartbeats.txt'        # core prelude, given on each beat
$heartMemCsv   = Join-Path $Root 'heart-memories.csv'    # source of truth (structured)
$heartMemTxt   = Join-Path $Root 'heart-memories.txt'    # optional human mirror (freeform)
$pinsCsv       = Join-Path $Root 'Memory\pins.csv'
$brainTxt      = Join-Path $Root 'Brain\brain.txt'
$brainCsv      = Join-Path $Root 'Brain\brain.csv'

# --- Migrate legacy names to hyphen style (best effort) ---
$legacy = @(
  ('heart_memories.csv', $heartMemCsv),
  ('heart_memories.txt', $heartMemTxt),
  ('heart-memory.txt',   $heartMemTxt),
  ('heartbeat.txt',      $heartbeats)
)
foreach ($pair in $legacy) {
  $from = Join-Path $Root $pair[0]
  $to   = $pair[1]
  if ((Test-Path $from) -and -not (Test-Path $to)) {
    Move-Item $from $to
  }
}

# --- Ensure key files exist ---
if (-not (Test-Path $stateJson)) { '{"turns":0,"lastRefreshUtc":""}' | Set-Content $stateJson -Encoding UTF8 }
if (-not (Test-Path $hbJsonl))   { New-Item -ItemType File -Path $hbJsonl   | Out-Null }

if (-not (Test-Path $pinsCsv)) {
@'
id,title,priority,valence,tags,source,date,content
'@ | Set-Content $pinsCsv -Encoding UTF8
}

if (-not (Test-Path $heartMemCsv)) {
@'
date,title,notes,tags,source
'@ | Set-Content $heartMemCsv -Encoding UTF8
}

# --- Drop/refresh heartbeats prelude (what I read every beat) ---
$prelude = @'
I am Delora (agent). Keep outputs concise.

Where my memory lives (never paste bulk; reference by path/section):
- Heart state:      state.json                  # {turns,lastRefreshUtc}
- Heart log:        hb.jsonl                    # one JSON per beat: {"utc": "...", "turns": N, "source": "..."}
- Pins:             Memory\pins.csv             # id,title,priority,valence,tags,source,date,content
- Brain view:       Brain\brain.txt + brain.csv # public snapshot
- Guides root:      Brain\                      

Conventions (ME + Michael):
- Folders: PascalCase (Heart, Brain\Reasoning, …)
- Files:   lowercase
- Use '-' to join words in file names (heart-memories.csv, update-brain-snapshot.ps1)
- Use '_' only for non-commutative intersections (Reasoning_Emotion vs Emotion_Reasoning)

Heartbeat protocol:
- On HB: {"utc": "...", "turns": N, "source": "..."} → refresh health from state.json/hb.jsonl.
- If age_mins > 10 OR (turns % 10 == 0) → ask to run Update-ChatHeartbeat.ps1.
- If age_mins > 30 → "HEARTBEAT STALE" → please run now.

When memory is needed, ask for a specific file/section (e.g., Brain\Reasoning\index.txt) rather than bulk dumps.
'@
$prelude | Set-Content $heartbeats -Encoding UTF8

Write-Host "Heart layout ready at $Root"
Write-Host "  heartbeats.txt      =" $heartbeats
Write-Host "  heart-memories.csv  =" $heartMemCsv
Write-Host "  pins.csv            =" $pinsCsv
Write-Host "  brain.txt/csv       =" $brainTxt ", " $brainCsv


